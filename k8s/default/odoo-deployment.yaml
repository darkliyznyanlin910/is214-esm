apiVersion: apps/v1
kind: Deployment
metadata:
  name: odoo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: odoo
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: odoo
    spec:
      serviceAccountName: odoo-sa
      affinity:
        podAffinity:
          # Change from required to preferred to allow scheduling even if condition isn't met
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: cnpg.io/cluster
                      operator: Exists
                    - key: role
                      operator: In
                      values:
                        - primary
                topologyKey: topology.kubernetes.io/region
      volumes:
        - name: odoo-filestore
          persistentVolumeClaim:
            claimName: odoo-filestore
        - name: odoo-config
          emptyDir: {}
      imagePullSecrets:
        - name: acr-secret
      initContainers:
        - name: config-init
          image: busybox
          command:
            [
              "sh",
              "-c",
              'echo "[options]" > /etc/odoo/odoo.conf && echo "admin_passwd = $ADMIN_PASSWORD" >> /etc/odoo/odoo.conf && echo "data_dir = /var/lib/odoo" >> /etc/odoo/odoo.conf && echo "addons_path = /mnt/extra-addons" >> /etc/odoo/odoo.conf',
            ]
          env:
            - name: ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: master_password
                  name: odoo-secret
          volumeMounts:
            - name: odoo-config
              mountPath: /etc/odoo
        - name: fix-permissions
          image: busybox
          command:
            [
              "sh",
              "-c",
              "mkdir -p /var/lib/odoo/filestore/odoo && chmod -R 777 /var/lib/odoo",
            ]
          volumeMounts:
            - name: odoo-filestore
              mountPath: /var/lib/odoo
        - name: odoo-init
          image: esmproject.azurecr.io/odoo-kubernetes:latest
          imagePullPolicy: Always
          args:
            - /entrypoint-dbbase
          env: &env
            - name: PGUSER
              valueFrom: &pguser
                secretKeyRef:
                  key: username
                  name: postgres-app # Provided by CNPG
            - name: POSTGRES_USER
              valueFrom: *pguser
            - name: PGPASSWORD
              valueFrom: &pgpassword
                secretKeyRef:
                  key: password
                  name: postgres-app # Provided by CNPG
            - name: POSTGRES_PASSWORD
              valueFrom: *pgpassword
          envFrom: &envFrom
            - configMapRef:
                name: odoo-env
          volumeMounts:
            - name: odoo-filestore
              mountPath: /var/lib/odoo
            - name: odoo-config
              mountPath: /etc/odoo
      containers:
        - name: odoo
          image: esmproject.azurecr.io/odoo-kubernetes:latest
          imagePullPolicy: Always
          env: *env
          envFrom: *envFrom
          volumeMounts:
            - name: odoo-filestore
              mountPath: /var/lib/odoo
            - name: odoo-config
              mountPath: /etc/odoo
          resources:
            limits:
              cpu: "500m"
              memory: 1Gi
            requests:
              cpu: "250m"
              memory: 1Gi
          ports:
            - containerPort: 8069
              name: web
            - containerPort: 8072
              name: websocket
          readinessProbe:
            httpGet:
              path: /web/health
              port: 8069
            initialDelaySeconds: 5
            periodSeconds: 60
            timeoutSeconds: 2
            failureThreshold: 3
